#!/usr/bin/env ruby

require "optparse"

options = {
  color: STDOUT.tty?,
  remote: "origin",
  show_commands: false,
  show_merged: true,
  show_report: true,
  show_unmerged: true,
  users: nil,
}

OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} --[no-]color --remote [REMOTE] --[no-]show-merged --[no-]show-unmerged"
  opts.on("--[no-]color") { |o| options[:color] = o }
  opts.on("--remote [REMOTE]") { |o| options[:remote] = o }
  opts.on("--[no-]show-commands") { |o| options[:show_commands] = o }
  opts.on("--[no-]show-merged") { |o| options[:show_merged] = o }
  opts.on("--[no-]show-report") { |o| options[:show_report] = o }
  opts.on("--[no-]show-unmerged") { |o| options[:show_unmerged] = o }
  opts.on("--users x,y,z", Array) { |o| options[:users] = o }
end.parse!

remote_match = %r{^\s+#{Regexp::quote(options[:remote])}/\S+$}

begin
  require "colored" if options[:color]
rescue LoadError
  options[:color] = false
end

unless options[:color]
  class String
    %w(blue green magenta red yellow).each do |color|
      define_method(color.to_sym) { self }
    end
  end
end

branches = {}
$merged_branches = {}

IO.popen("git branch -r --no-color --merged", "r").grep(remote_match).map { |b| b.sub(%r{\s+}, %q{}).chomp }.each do |branch|
  $merged_branches[branch] = true
end

def is_merged? (branch)
  $merged_branches.has_key?(branch) && $merged_branches[branch];
end

IO.popen("git branch -r --no-color", "r").grep(remote_match).map { |b| b.chomp.sub(/^\s+/, %q{}) }.each do |branch|
  committer, rel_commit_date, timestamp = `git log -1 --format='%ce%n%cr%n%ct' #{branch}`.chomp.split(/\n/)
  next if options[:users] && ! options[:users].include?(committer)
  is_merged = is_merged?(branch)
  if (is_merged && options[:show_merged]) || (! is_merged && options[:show_unmerged])
    branches[committer] ||= []
    branches[committer] << [ branch, rel_commit_date, timestamp, is_merged?(branch) ]
  end
end

if options[:show_report]
  branches.keys.sort { |a,b| branches[b].length <=> branches[a].length }.each do |k|
    v = branches[k]
    print "#{k}:\n".yellow
    v.sort { |a,b| a[2] <=> b[2] }.map { |b|
      b[0].green + " (last commit " + b[1] + ", " + (b[3] ? "merged".magenta : "NOT MERGED".red) + ')'
    }.each { |branch| print "\t#{branch}\n" }
    print "\n"
  end
end

if options[:show_commands]
  branches.each_value do |v|
    v.map { |b| b[0].sub(%r{^#{Regexp::quote(options[:remote])}/}, %q{}) }.each do |branch|
      print "git push #{options[:remote]} :#{branch}\n"
    end
  end
end
